#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs')
var app = require('../app')
var debug = require('debug')('yzoz:server')
var http = require('http')
var https = require('https')

if (app.locals.appStatus == 'production') {
  var host = '0.0.0.0'
}
else {
  var host = 'localhost'
}

if (app.locals.appStatus == 'production'){
  http.createServer(function(req, res) {   
    res.writeHead(301, {"Location": "https://" + req.headers['host'] + req.url})
    res.end()
  }).listen(80)
  
  var server = https.createServer({ 
    key: fs.readFileSync("/etc/letsencrypt/live/yzoz.com/privkey.pem"),
    cert: fs.readFileSync("/etc/letsencrypt/live/yzoz.com/fullchain.pem")
  }, app)

  var port = normalizePort(process.env.PORT || '443')
}
else {
  var server = http.createServer(app)
  var port = normalizePort(process.env.PORT || '80')
}

app.set('port', port)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen({
  host: host,
  port: port,
  exclusive: true
});
//server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}